c(TRUE,TRUE,TRUE) && c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
7 %% 4
submit()
main()
1
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(deviance,c(1.4, 3.6, 7.9, 8.8))
evaluate(sum,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[10]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("programing", "is", "fun!")
paste("Programing", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
telegram("Me","lleva")
beta  <- args[["beta"]]
submit()
mad_libs(place="mexico", adjective = "angry", noun ="flo")
submit()
'I love' %p% 'R!'
'I' %p% 'love' %p% 'R!'
lybrary(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
0
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
class(c(4,T))
sapply(flag_colors,sum)
rbind(c(1,3,5),c(3,2,10))
list(2,"a","b","T")[[2]]
sapply(flag_colors,mean)
x <- 1:4
y <- 3
x+y
summary(airquality)
str(airquality)
airquality$Ozone[47]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
is.na(airquality$Ozone)
sum(is.na(airquality$Ozone))
unique_vals <- lapply(flags,unique)
unique_vals
mean(complete.cases(airquality$Ozone))
mean(airquality$Ozone)
asdf <- complete.cases(airquality$Ozone)
asdf
mean(asdf)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem)elem[2])
swirl()
airquality
airquality[,airquality$Ozone > 31 && airquality$Temp > 90]
airquality[,(airquality$Ozone > 31 && airquality$Temp > 90)]
airquality[,6 || airquality> 31
]
s <- split(airquality,airquality$Month)
s
str(s)
split(airquality, airquality$Month)
a <- split(airquality, airquality$Month)
a
class(a)
a[2]
mean(a[2][4])
a[2][4]
a[[4]]
s <- a[2]
s
class(s)
tapply(s)
tapply(s, mean)
s[1]
as.data.frame(s)
s
class(s)
ss <- data.frame(s)
ss
class(ss)
ss[4]
mean(SS[4])
ss[4]
sss <- data.frame(ss[4])
sss
mean(sss)
sss <- vector(sss)
sss <- as.vector(sss)
sss
class(sss)
sss[1]
sapply(sss,mean)
a
pa <- a[1]
pa
sapply(pa,max)
airquality
airquality[,1]
f <- airquality[,1]
class(f)
airquality[,f>30]
f[f>30]
com1 <- complete.cases(airquality)
com1
com2 <- airquality[com1]
com2 <- airquality[com1,]
com2
aver <- com2[com2$Ozone > "30" & com2$Temp > "90",]
aver
1+3
267+272+203+237+188+167+197+183+189
1903/9
aver
com2
sapply(com2,mean)
sapply(aver,mean)
airquality
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique,numeric(1))
vapply(flags, unique,numeric
)
ok()
ujyuhj
as
library(swirl)
swirl()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate,flags$landmass,mean())
table(flags$animate,flags$landmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
flags
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace = TRUE)
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,07))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(100,size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
unclass(t1)
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2)
)
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "Octuber 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strftime(t3, "%B %d, %Y %H:%M"")
strftime(t3, "%B %d, %Y %H:%M")
strftime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = "Dist", x = "Speed")
plot(y = Dist, x = Speed)
plot(y = cars$dist, x = cars$speed)
plot(y = cars$dist, x = cars$speed, xlab = "Speed")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab = "Stopping Distance")
plot(y = cars$dist, x = cars$speed, ylab = "Stopping Distance")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab = "Stopping Distance")
plot(cars)
plot(cars, main = "My plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
which.min(c(0,0,4,0))
which.min(c(1,0,4,0))
min(c(1,0,4,0))
rankingcompleto <- function(resultado, num="mejor"){
outcome<-read.csv("outcome-of-care-measures.csv",colClasses= "character")
vector1<-vector("numeric")
vector2<-vector("numeric")
resultados<-c("falla", "ataque","neumonia")
validar2 <- resultados==resultado
suma2 <- sum(validar2)
if (suma2!=1) {
stop("resultado inválido")
}
if (resultado =="ataque"){
i<-11
} else if (resultado=="falla"){
i <- 17
}else if(resultado=="neumonia"){
i<-23
}
if(num=="mejor"){
num<-1
}
separa <- split(outcome,outcome[,7])
if( is.numeric(num)==T){
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2])
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
} else if(num=="peor") {
num <- 1
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2],decreasing = T)
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
}
datos <- data.frame(vector1,names(separa))
names(datos)<-c("hospital","state")
rownames(datos) <- names(separa)
datos
}
rankingcompleto("falla", 7)
rankingcompleto <- function(resultado, num="mejor"){
outcome<-read.csv("outcome-of-care-measures.csv",colClasses= "character")
vector1<-vector("numeric")
vector2<-vector("numeric")
resultados<-c("falla", "ataque","neumonia")
validar2 <- resultados==resultado
suma2 <- sum(validar2)
if (suma2!=1) {
stop("resultado inválido")
}
if (resultado =="ataque"){
i<-11
} else if (resultado=="falla"){
i <- 17
}else if(resultado=="neumonia"){
i<-23
}
if(num=="mejor"){
num<-1
}
separa <- split(outcome,outcome[,7])
if( is.numeric(num)==T){
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2])
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
} else if(num=="peor") {
num <- 1
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2],decreasing = T)
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
}
datos <- data.frame(vector1,names(separa))
names(datos)<-c("hospital","state")
rownames(datos) <- names(separa)
datos
}
rankingcompleto("falla", 7)
setwd("C:/Users/Propietario/Documents/GitHub/Programaci-n_Actuarial_-III_OT16/Caso_No.2")
rankingcompleto <- function(resultado, num="mejor"){
outcome<-read.csv("outcome-of-care-measures.csv",colClasses= "character")
vector1<-vector("numeric")
vector2<-vector("numeric")
resultados<-c("falla", "ataque","neumonia")
validar2 <- resultados==resultado
suma2 <- sum(validar2)
if (suma2!=1) {
stop("resultado inválido")
}
if (resultado =="ataque"){
i<-11
} else if (resultado=="falla"){
i <- 17
}else if(resultado=="neumonia"){
i<-23
}
if(num=="mejor"){
num<-1
}
separa <- split(outcome,outcome[,7])
if( is.numeric(num)==T){
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2])
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
} else if(num=="peor") {
num <- 1
for (j in 1:54) {
s <- separa[[j]]
s[,i]<-suppressWarnings(as.numeric(s[,i]))
cual <- order(s[,i],s[,2],decreasing = T)
hospitales <- s[cual,2]
regresar <- hospitales[num]
vector1 <- c(vector1,regresar)
}
}
datos <- data.frame(vector1,names(separa))
names(datos)<-c("hospital","state")
rownames(datos) <- names(separa)
datos
}
rankingcompleto("falla", 7)
getwd()
getwd()
getwd()
setwd("C:/Users/Propietario/Documents/GitHub/Programaci-n_Actuarial_-III_OT16")
getwd()
getwd()
tail(list.files(),2)
tail(list.files(),2)
setwd("./specdata")
getwd()
tail(list.files(),2)
setwd("../")
getwd()
setwd("../")
getwd()
getwd()
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
?file.exists
setwd("C:/Users/Propietario/Documents/GitHub/Programaci-n_Actuarial_-III_OT16")
getwd()
if (!file.exists("data")) dir.create("data")
#Desgargar datos de internet
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url,destfile = "./data/camaras.csv")
list.files("./data")
fechaDescarga <- date()
fechaDescarga
dataCam <- read.table("./data/camaras.csv")
head(dataCam)
?read.table
dataCam <- read.table("./data/camaras.csv", sep = ",", header = T)
head(dataCam)
dataCam[2:5,]
dataCam <- read.csv("./data/camaras.csv")
head(dataCam)
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true"
download.file(url, destfile = "./data/camaras.xlsx", method = "curl")
download.file(url, destfile = "./data/camaras.xlsx")
list.files("./data")
fechaDescarga1 <- date()
install.packages("rJava")
install.packages("xlsx")
library("raJava")
library("rJava")
library(xlsx)
library("xlsx"")
library("xlsx"")
library("xlsx"")
library("xlsx"")
library("xlsx")
