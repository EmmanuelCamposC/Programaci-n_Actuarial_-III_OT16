clear
a <- available.packages()
head(a,3)
head(rownames(a),3)
n <- signif(nrow(a),2)
n<- signif(nrow(a),2)
n
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
install.packages()
installpackages()
installed.packages()
library(ggplot2)
require(ggplot2)
library("bitops", lib.loc="~/R/win-library/3.3")
detach("package:bitops", unload=TRUE)
detach("package:BiocInstaller", unload=TRUE)
library("BiocInstaller", lib.loc="~/R/win-library/3.3")
install.packages("Rtools")
install.packages("devtools")
install.packages("rmarkdown")
library("markdown", lib.loc="~/R/win-library/3.3")
install.packages("rmarkdown")
x <- 1
print(x)
x
msg <- "Hola"
msg
x <- ##Esto es un comentario
2
x
x <- 1:20
x
?vector
a<-vector(mode= "numeric", length = 5)
1/3
1/3 <- l
class(1)
class(1l)
class(1L)
1/0
0/0
1/Inf
attributes(airquality)
tevale<- madres
#Clase de 25/08/2016
#Crear Vectores
x <-vector(mode="numeric", length = 5L)
x
x <- c(0.5,0.6)
x
class(x)
x <- c(TRUE,FALSE)
x
class(x)
x <- c(TRUE,FALSE, T, F)
x
class(x)
x <- 5:10
x
class(x)
x <- 5:10
x
class(x)
x <- 10:0
x
class(x)
x <- c(1+2i,5,3+9i,-4-5i)
x
class(x)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
x <- c("a","b","c","d")
x
class(x)
x <- c("a","b","c","d",e)
x
class(x)
y <- c(1.7,"a") #caracter
y
class(y)
y <- c(T,2)     #numérico
y
class(y)
y <- c("a",T)   #caracter
y
class(y)
y <- c(1.7,"a") #caracter
y
class(y)
y <- c(T,2)     #numérico
y
class(y)
y <- c("a",T)   #caracter
y
class(y)
y <-c(T, 10L, 8, 1+1i, "a")
y
class(y)
y <-c(T, 10L, 8, 1+1i)
y
class(y)
# Coerción explícita
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.character(z)
z <- c(1+2i, 3+4i, 8, 0+3i)
as.logical(z)
z <- c(1+2i, 3+4i, 8, 0+3i,0)
as.logical(z)
z <- c("programación","me cansa","Act.3")
z <- c("programación","me cansa","Act.3")
as.numeric(z)
as.logical(z)
as.complex(z)
x <-list(4,"a",5L,4+8i,T)
x
x <-list(1,"a",5L,4+8i,T, 1:100)
x
class(x)
?matrix
m <- matrix(nrown = 2,ncol = 3)
m
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
attributes(m)
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
args(m)
args(m)
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
args(m)
dim(m) <- c(3,2)
m
m <-matrix(1:6, nrow = 3, ncol = 2 )
m
m <-matrix(1:6,3,2,T)
m
m <-matrix(1:6,3,3,T)
m
class(m)
str(m)
dim(m) <- c(2,5)
x <- c(1,,2,3)
y <- c("a","b","c")
z <- c(x,y)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(x,y)
z
m1 <- rbind(m,x)
m1
m2 <- cbind(m,x)
m2
m3 <- rbind(m1,y)
m3
m4 <- cbind(m2,y)
m4
data
colclassses?
x
?colclasses
s <- c("de")
as.logical(s)
s <- c(5L)
as.logical(s)
s <- c(5L)
as.logical(s)
s <- c("d")
as.logical(s)
m <- matrix(1:4,2,2)
m
attributes(m)
dimnames(m) <- list(c("fil1","fil2"),c("col1","col2"))
m
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.character(z)
x <-list(4,"a",5L,4+8i,T)
x
class(x)
#Creamos un vector
x <- c("a","b","a","c","d","e")
x
#Extramos []
x[1]
x[2]
#también podemos con secuencias de elementos
x[1:4]
#es posible extraer elmentos que cumplen condiciones
x[x>"b"]
x <- list(foo = 1:4, bar = 0.6)
#extraemos el primer elemento de la lista
# este elmento es una lista  que contiene una secuencia
x[1]
#extramos nuevamente el primer elemento de la lista,
#ahora el elemtento es la lista en si
x[[1]]
x <- list(foo = 1:4, bar = 0.6)
x$foo
x$foo[2]
x <- list(foo = 1:4, bar = 0.6, baz = "Hola")
#Extraemos el primer y tercer elemento de la lista
x [[c(1,3)]]
x[[c(1,3)]]
#Creamos una lista de 3 elementos
x <- list(foo = 1:4, bar = 0.6, baz = "Hola")
#Extraemos el primer y tercer elemento de la lista
x[c(1,3)]
x[c[1,3]]
x[c([1],[3])]
x[[[c(1,3)]]]
x[[[c(1,3)]]
x[c(1,3)]
x[[[c(1,3)]]
x[[c(1,3)]]
name <- "foo"
x[[name]]
x$name
x$foo
x <- list( a = list(10,12,14), b = list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x <- matrix(1:6, 2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
x[1,2]
#con drop  = F, se matiene la dimensión y
# el resultado será una matriz.
x[1,2, drop = F]
x[1,2, drop = F]
#si dejamos solamente el espacio, el resultado será un vector
x[1,]
#Si usamos drop = F, el resultado será una matriz.
x[1, drop = F]
x[1, ,drop = F]
x <- list(asd = 1:5)
x$a
X[["a"]]
x[["a", exact = F]]
X[["asd"]]
x[["a", exact = F]]
airquality[1:6,]
completos <- complete.cases(airquality)
completos
airquality
airquality[1:153,, completos = T]
airquality[1:153,]
airquality[completos,]
airquality[completos,][1:6,]
airquality[1:6,][completos,]
x <- 1:4 ; y <- 9:6
x + y
x > 2
x >= 2
x == 8
x*y
x/y
y = 8
y
x <- matrix(1:4,2,2) ; y <- matrix(rep(10,4),2,2)
x * y
x / y
x% * %y
x %*% y
for (i in 1:10){
print(i)
}
for (i in 1:10){print(i)}
x <- c("a","b","c","d")
for ( i in 1:4){print(x[i])}
for ( i in seq_along(x)){print(x[i])}
for ( letra in x){print(letra)}
x <- c("a","b","c","d",3)
for ( letra in x){print(letra)}
x <- c("a","b","c","d")
x <- matrix(1:6, 2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
x[1,2, drop = F]
#si dejamos solamente el espacio, el resultado será un vector
x[1,]
#Si usamos drop = F, el resultado será una matriz.
x[1, ,drop = F]
x <- matrix(1:6, 2,3)
for (i in seq_along(x)) {print(x[i,])}
dim(x)
for (i in 2 {for (i in 3) { print(x[i,j])}}
for (i in 2 {for (j in 3) { print(x[i,j])}}
for (i in 2 ){for (j in 3) { print(x[i,j])}}
for (i in seq_along(x) ){for (j in seq_along(x)) { print(x[i,j])}}
x <- matrix(1:6, 2,3)
x
for (i in seq_along(x)+1 ){for (j in seq_along(x)) { print(x[i,j])}}
for (i in seq_along(x)+2 ){for (j in seq_along(x)) { print(x[i,j])}}
for (i in seq_along(x)+1 ){for (j in seq_along(x)) { print(x[i,j])}}
dimnames(x)
x <- matrix(1:6, 2,3)
x
for (i in seq_along(nrow(x)) ){for (j in seq_along(ncol(x))) { print(x[i,j])}}
for (i in seq_len(nrow(x)) ){for (j in seq_len(ncol(x))) { print(x[i,j])}}
x <- c(TRUE,FALSE, T, F)
x
class(x)
y <- c(1.7,"a") #caracter
y
class(y)
y <-c(T, 10L, 8, 1+1i)
y
class(y)
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.character(z)
z <- c(1+2i, 3+4i, 8, 0+3i,0)
as.logical(z)
z <- c("programación","me cansa","Act.3")
as.numeric(z)
as.logical(z)
as.complex(z)
x <-list(4,"a",5L,4+8i,T)
x
class(x)
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
dim(m) <- c(3,2)
m
m <-matrix(1:6, nrow = 3, ncol = 2 )
m
m <-matrix(1:6,3,3,T)
m
class(m)
str(m)
dim(m) <- c(2,5) #error
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(x,y)
z
m1 <- rbind(m,x)
m1
m2 <- cbind(m,x)
m2
rbind(m1,y)
cbind(m2,y)
#factores
x <- factor(c("si","no","si","si","no","si","no"))
x
table(x)
unclass(x)
x <- factor(c("si","no","si","si","no","si","no"),levels = c("si","no")) #unclass(x)
x <- factor(c("azul","azul","rojo","azul","amarillo ","verde","azul"))
x <- factor(c("si","no","si","si","no","si","no"))
x
table(x)
unclass(x)
x <- factor(c("si","no","si","si","no","si","no"),levels = c("si","no")) #unclass(x)
x <- factor(c("azul","azul","rojo","azul","amarillo ","verde","azul"))
x
table(x)
#Valores faltantes
x <- c(1,2,NaN,10,3)
is.na(x)
is.nan(x)
#Data Frames
x <- data.frame(Erick = 1:4, Lori = c(T,T,F,F))
row.names(x) <- c("Primero","Segundo","Tercero","Cuarto")
x
nrow(x)
ncol(x)
attributes(x)
names(x) <- c("Yarely","Karen")
x
x <- 1:3
names(x) #NULL
names(x) <- c("Hugo","Paco","Luis")
x
x <- list(a=1:10,b=100:91,c=51:60)
x
names(x) <- c("seq1","SEQ2","sEq3")
x
m <- matrix(1:4,2,2)
m
attributes(m)
dimnames(m) <- list(c("fil1","fil2"),c("col1","col2"))
m
getwd()
setwd("~/GitHub/Programaci-n_Actuarial_-III_OT16")
data <- read.csv("Datos_S&P.csv")
data <- read.table("Datos_S&P.csv",T,",", nrows = 100)
clases <-sapply(data, class)
data <- read.table("Datos_S&P.csv",T,",", colClasses = clases) #WTF
data
x <- "Programación Acturial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"), file = "data.R")
rm(x,y)
x
x <- c("a","b","a","c","d","e")
x
x <- list( a = list(10,12,14), b = list(3.14,2.81))
x[[c(1,3)]]
x <- list(foo = 1:4, bar = 0.6, baz = "Hola")
x[c(1,3)]
x[[c(1,3)]]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x <- list(foo = 1:4, bar = 0.6, baz = "Hola")
x[c(1,3)]
x[[c(1,3)]]
name <- "foo"
x[[name]]
x$name
x$foo
x <- list( a = list(10,12,14), b = list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[c(1,3)]
x <- matrix(1:6, 2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
x[1,2]
x[1,2, drop = F]
x[1,]
x[1, ,drop = F]
x <- list(asd = 1:5)
x$a
X[["asd"]]
x[["a", exact = F]]
airquality[1:6,]
completos <- complete.cases(airquality)
completos
airquality[completos,][1:6,]
airquality[1:6,][completos,]
